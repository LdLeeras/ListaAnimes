# -*- coding: utf-8 -*-
"""Lista Top 10 Animes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17IiDSFaSBlhyD4W81mR9vjJ40r9j1b5M
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types
from datetime import date
import textwrap
from IPython.display import display, Markdown
import requests
import warnings

warnings.filterwarnings("ignore")

def call_agent(agent: Agent, message_text: str) -> str:

    session_service = InMemorySessionService()

    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")

    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)

    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""

    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

def agente_buscador(tema_anime, data_atual):

    buscador = Agent(
        name="agente_buscador",
        model="gemini-2.0-flash",
        instruction="""
        Você é um agente de pesquisa focado em vasculhar a internet utilizando a ferramenta (google_search) para encontrar os 10 melhores animes sobre o tema apontado pelo usuario, os pontos que voce ira considerar são:
        -ranques em sites renomados do assunto
        -numeros de vizualizaçoes
        -opinioes em redes sociais
        -inovação
        É importante ressaltar que as opinioes nas redes sociais precisam ser atuais, ou tambem bastante engajadoras se possivel.
        """,
        description="Agente que busca informações no Google",
        tools=[google_search]
    )

    entrada_buscador = f"tema: {tema_anime}\nData de hoje: {data_atual}"

    animes_encontrados = call_agent(buscador, entrada_buscador)
    return animes_encontrados

def agente_planejador(tema_anime, animes_encontrados):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        instruction=""" Voce é um agente focado em listar os animes pesquisados pelo outro agente, voce deve focar em ser sucinto mas mantes todas as informaçoes importantes, seja tambem natural em seus resultados,
         alem de apontar suas datas de lançamento, você pode ranquea-los tambem com base em notas dadas na internet utilize a ferramenta (google_search) para isso""",
        description="Agente planejador de lista animes",
        tools=[google_search]
    )

    entrada_planejador = f"tema:{tema_anime}\nAnimes buscados: {animes_encontrados}"

    lista_animes_planejada = call_agent(planejador, entrada_planejador)
    return lista_animes_planejada

def agente_redator(tema_anime, lista_animes_planejada):
    redator = Agent(
        name="agente_redator",
        model="gemini-2.0-flash",
        instruction="""
            Você é um Redator Criativo especializado em criar posts virais para redes sociais.
            Voce ira redigir um post de top 10, ou seja você utilizara a lista fornecida pelo outro agente para preparar um post para o tiktok, com legenda e conteudo do post descrito. Utilize uma linguajem focada no assunto,
            se quiser referencie animes conhecidos em seus textos.
            """,
        description="Agente redator de posts engajadores para o TikTok"
    )
    entrada_redator = f"tema: {tema_anime}\nPlano de post: {lista_animes_planejada}"

    rascunho_post = call_agent(redator, entrada_redator)
    return rascunho_post

def agente_revisor(tema_anime, rascunho_post):
    revisor = Agent(
        name="agente_revisor",
        model="gemini-2.0-flash",
        instruction="""
            Você é um Editor e Revisor de Conteúdo meticuloso, especializado em posts para redes sociais, com foco no TikTok.
            Os posts que você vai revisar são focados na faixa etaria de 10 a 30 anos.
            A pagina utiliza um linguagem mais natural, mas noa são aceitos erros de gramatica
            Você revisará também os fatos descritos nos posts, se eles realmente são veridicos, inclusive os referenciando os proprios animes
            Se não houver problemas com o post, apenas diga "O seu post ficou massa em",
            caso haja problemas os aponte e corrija-os
            """,
        description="Agente revisor de post para redes sociais."
    )
    entrada_revisor = f"tema: {tema_anime}\nRascunho: {rascunho_post}"
    # Executa o agente
    post_revisado = call_agent(revisor, entrada_revisor)
    return post_revisado

data_atual = date.today().strftime("%d/%m/%Y")
print("Olá sou o criador de posts sobre animes mais conhecido no mundo ninja")

# --- Obter o tema do Usuário ---
tema_anime = input("Por favor digite seu tema que tem interesse: ")

if not tema_anime:
    print("Você esqueceu de digitar o seu tema!")
else:
    print(f"Ótimo, vamos encontrar os melhores animes para você 🫵, e ainda bolar um post para bombar no seu TikTok 💥")

    animes_encontrados = agente_buscador(tema_anime, data_atual)
    print("\n--- 📝 Resultado do Agente 1 (Buscador) ---\n")
    display(to_markdown(animes_encontrados))
    print("--------------------------------------------------------------")

    lista_animes_planejada = agente_planejador(tema_anime, animes_encontrados)
    print("\n--- 📝 Resultado do Agente 2 (Planejador) ---\n")
    display(to_markdown(lista_animes_planejada))
    print("--------------------------------------------------------------")

    rascunho_post = agente_redator(tema_anime, lista_animes_planejada)
    print("\n--- 📝 Resultado do Agente 3 (Redator) ---\n")
    display(to_markdown(rascunho_post))
    print("--------------------------------------------------------------")

    post_final = agente_revisor(tema_anime, rascunho_post)
    print("\n--- 📝 Resultado do Agente 4 (Revisor) ---\n")
    display(to_markdown(post_final))
    print("--------------------------------------------------------------")